- name: Configure bastion for OCP4 UPI
  hosts: localhost
  become: true
  vars_files:
  - vars.yml
  tasks:
  - name: Open firewallD services
    ansible.posix.firewalld:
      service: "{{ item }}"
      permanent: yes
      immediate: yes
      state: enabled
    loop:
    - dns
    - http
    - https
    - dhcp

  - name: Open firewallD ports
    ansible.posix.firewalld:
      port: "{{ item }}"
      permanent: yes
      immediate: yes
      state: enabled
    loop:
    - 8080/tcp
    - 22623/tcp
    - 6443/tcp
    - 8443/tcp

  - name: Install required software
    ansible.builtin.yum:
      name: "{{ item }}"
      state: present
    loop:
    - bind
    - bind-utils
    - httpd
    - haproxy

  - name: Get the IP segment
    ansible.builtin.shell: hostname -I|cut -d. -f3
    register: hostname_output

  - name: Configure haproxy.cfg
    ansible.builtin.template:
      src: haproxy.j2
      dest: /etc/haproxy/haproxy.cfg
    vars:
      labenv_segment: "{{ hostname_output.stdout }}"

  - name: Allow HAproxy to listen on tcp port 22623
    ansible.builtin.seport:
      ports: 22623
      proto: tcp
      setype: http_port_t
      state: present

  - name: Allow HAproxy to listen on tcp port 6443
    ansible.builtin.seport:
      ports: 6443
      proto: tcp
      setype: http_port_t
      state: present

  - name: Enable haproxy
    ansible.builtin.service:
      name: haproxy
      state: started
      enabled: true

  - name: Configure reverse domain DNS file
    ansible.builtin.template:
      src: 168.192.in-addr.arpa.j2
      dest: "/var/named/{{ hostname_output.stdout }}.168.192.in-addr.arpa"

  - name: Configure domain DNS file
    ansible.builtin.template:
      src: dynamic.opentlc.com.zone.j2
      dest: "/var/named/dynamic.opentlc.com.zone"
    vars:
      labenv_segment: "{{ hostname_output.stdout }}"


  - name: Configure named main config
    ansible.builtin.template:
      src: named.conf.j2
      dest: "/etc/named.conf"
    vars:
      labenv_segment: "{{ hostname_output.stdout }}"

  - name: Enable named
    ansible.builtin.service:
      name: named
      state: started
      enabled: true

  - name: Configure resolv.conf
    ansible.builtin.copy:
      content: |
        search {{ guid }}.dynamic.opentlc.com
        nameserver 192.168.{{ hostname_output.stdout }}.10
      dest: /etc/resolv.conf

  - name: Download OC client and extract it
    ansible.builtin.shell: curl -L -s {{ url }} | tar zxvf - -C /usr/local/bin/ oc
    vars:
      url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux-{{ ocp_version }}.tar.gz

  - name: Download OC installer and extract it
    ansible.builtin.shell: curl -L -s {{ url }} | tar zxvf - -C /usr/local/bin/ openshift-install
    vars:
      url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz

  - name: Configure Listen syntax on httpd.conf
    ansible.builtin.replace:
      path: /etc/httpd/conf/httpd.conf
      regexp: 'Listen 80'
      replace: "Listen 192.168.{{ hostname_output.stdout }}.10:8080"

  - name: Enable httpd
    ansible.builtin.service:
      name: httpd
      state: started
      enabled: true
    
